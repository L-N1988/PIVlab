function [methodinfo,structs,enuminfo,ThunkLibName]=sc2_cam_mfile
%SC2_CAM_MFILE Create structures to define interfaces found in 'sc2_cammatlab'.

%This function was generated by loadlibrary.m parser version  on Fri Jun  6 15:54:25 2025
%perl options:'sc2_cammatlab.i -outfile=sc2_cam_mfile.m -thunkfile=PCO_CAM_SDK_thunk_pcwin64.c -header=sc2_cammatlab.h sc2_common.h sc2_camexport.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'PCO_CAM_SDK_thunk_pcwin64');
%  int PCO_GetGeneral ( void * ph , PCO_General * strGeneral ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetGeneral'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'PCO_GeneralPtr'};fcnNum=fcnNum+1;
%  int PCO_GetCameraType ( void * ph , PCO_CameraType * strCamType ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetCameraType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'PCO_CameraTypePtr'};fcnNum=fcnNum+1;
%  int PCO_GetCameraHealthStatus ( void * ph , uint32_t * dwWarn , uint32_t * dwErr , uint32_t * dwStatus ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetCameraHealthStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_ResetSettingsToDefault ( void * ph ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='PCO_ResetSettingsToDefault'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  int PCO_GetTemperature ( void * ph , int16_t * sCCDTemp , int16_t * sCamTemp , int16_t * sPowTemp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetTemperature'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int16Ptr', 'int16Ptr', 'int16Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetInfoString ( void * ph , uint32_t dwinfotype , char * buf_in , uint16_t size_in ); 
fcns.thunkname{fcnNum}='int32voidPtruint32cstringuint16Thunk';fcns.name{fcnNum}='PCO_GetInfoString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'cstring', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetCameraName ( void * ph , char * szCameraName , uint16_t wSZCameraNameLen ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringuint16Thunk';fcns.name{fcnNum}='PCO_GetCameraName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetFirmwareInfo ( void * ph , uint16_t wDeviceBlock , PCO_FW_Vers * pstrFirmWareVersion ); 
fcns.thunkname{fcnNum}='int32voidPtruint16voidPtrThunk';fcns.name{fcnNum}='PCO_GetFirmwareInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'PCO_FW_VersPtr'};fcnNum=fcnNum+1;
%  int PCO_GetCameraSetup ( void * ph , uint16_t * wType , uint32_t * dwSetup , uint16_t * wLen ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetCameraSetup'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint32Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetCameraSetup ( void * ph , uint16_t wType , uint32_t * dwSetup , uint16_t wLen ); 
fcns.thunkname{fcnNum}='int32voidPtruint16voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetCameraSetup'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint32Ptr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_RebootCamera ( void * ph ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='PCO_RebootCamera'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  int PCO_GetShutterMode ( void * ph , uint16_t * wShuttermode ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetShutterMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetShutterMode ( void * ph , uint16_t wShuttermode ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetShutterMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetPowerSaveMode ( void * ph , uint16_t * wMode , uint16_t * wDelayMinutes ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetPowerSaveMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetPowerSaveMode ( void * ph , uint16_t wMode , uint16_t wDelayMinutes ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint16Thunk';fcns.name{fcnNum}='PCO_SetPowerSaveMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetBatteryStatus ( void * ph , uint16_t * wBatteryType , uint16_t * wBatteryLevel , uint16_t * wPowerStatus , uint16_t * wReserved , uint16_t wNumReserved ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtruint16Thunk';fcns.name{fcnNum}='PCO_GetBatteryStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetFanControlParameters ( void * hCam , uint16_t * wMode , uint16_t * wValue , uint16_t * wReserved , uint16_t wNumReserved ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtruint16Thunk';fcns.name{fcnNum}='PCO_GetFanControlParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_SetFanControlParameters ( void * hCam , uint16_t wMode , uint16_t wValue , uint16_t wReserved ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint16uint16Thunk';fcns.name{fcnNum}='PCO_SetFanControlParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetSensorStruct ( void * ph , PCO_Sensor * strSensor ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetSensorStruct'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'PCO_SensorPtr'};fcnNum=fcnNum+1;
%  int PCO_SetSensorStruct ( void * ph , PCO_Sensor * strSensor ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_SetSensorStruct'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'PCO_SensorPtr'};fcnNum=fcnNum+1;
%  int PCO_GetCameraDescription ( void * ph , PCO_Description * strDescription ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetCameraDescription'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'PCO_DescriptionPtr'};fcnNum=fcnNum+1;
%  int PCO_GetCameraDescriptionEx ( void * ph , PCO_DescriptionEx * strDescription , uint16_t wType ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint16Thunk';fcns.name{fcnNum}='PCO_GetCameraDescriptionEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'PCO_DescriptionExPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetSensorFormat ( void * ph , uint16_t * wSensor ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetSensorFormat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetSensorFormat ( void * ph , uint16_t wSensor ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetSensorFormat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetSizes ( void * ph , uint16_t * wXResAct , uint16_t * wYResAct , uint16_t * wXResMax , uint16_t * wYResMax ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetSizes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetROI ( void * ph , uint16_t * wRoiX0 , uint16_t * wRoiY0 , uint16_t * wRoiX1 , uint16_t * wRoiY1 ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetROI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetROI ( void * ph , uint16_t wRoiX0 , uint16_t wRoiY0 , uint16_t wRoiX1 , uint16_t wRoiY1 ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint16uint16uint16Thunk';fcns.name{fcnNum}='PCO_SetROI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetBinning ( void * ph , uint16_t * wBinHorz , uint16_t * wBinVert ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetBinning'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetBinning ( void * ph , uint16_t wBinHorz , uint16_t wBinVert ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint16Thunk';fcns.name{fcnNum}='PCO_SetBinning'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetPixelRate ( void * ph , uint32_t * dwPixelRate ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetPixelRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetPixelRate ( void * ph , uint32_t dwPixelRate ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='PCO_SetPixelRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%  int PCO_GetConversionFactor ( void * ph , uint16_t * wConvFact ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetConversionFactor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetConversionFactor ( void * ph , uint16_t wConvFact ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetConversionFactor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetDoubleImageMode ( void * ph , uint16_t * wDoubleImage ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetDoubleImageMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetDoubleImageMode ( void * ph , uint16_t wDoubleImage ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetDoubleImageMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetADCOperation ( void * ph , uint16_t * wADCOperation ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetADCOperation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetADCOperation ( void * ph , uint16_t wADCOperation ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetADCOperation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetIRSensitivity ( void * ph , uint16_t * wIR ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetIRSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetIRSensitivity ( void * ph , uint16_t wIR ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetIRSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetCoolingSetpoints ( void * ph , uint16_t wBlockID , uint16_t * wNumSetPoints , int16_t * sCoolSetpoints ); 
fcns.thunkname{fcnNum}='int32voidPtruint16voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetCoolingSetpoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16Ptr', 'int16Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetCoolingSetpointTemperature ( void * ph , int16_t * sCoolSet ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetCoolingSetpointTemperature'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetCoolingSetpointTemperature ( void * ph , int16_t sCoolSet ); 
fcns.thunkname{fcnNum}='int32voidPtrint16Thunk';fcns.name{fcnNum}='PCO_SetCoolingSetpointTemperature'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int16'};fcnNum=fcnNum+1;
%  int PCO_GetOffsetMode ( void * ph , uint16_t * wOffsetRegulation ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetOffsetMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetOffsetMode ( void * ph , uint16_t wOffsetRegulation ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetOffsetMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetNoiseFilterMode ( void * ph , uint16_t * wNoiseFilterMode ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetNoiseFilterMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetNoiseFilterMode ( void * ph , uint16_t wNoiseFilterMode ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetNoiseFilterMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetHWIOSignalCount ( void * ph , uint16_t * wNumSignals ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetHWIOSignalCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetHWIOSignalDescriptor ( void * ph , uint16_t wSignalNum , PCO_Single_Signal_Desc * pstrSignal ); 
fcns.thunkname{fcnNum}='int32voidPtruint16voidPtrThunk';fcns.name{fcnNum}='PCO_GetHWIOSignalDescriptor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'PCO_Single_Signal_DescPtr'};fcnNum=fcnNum+1;
%  int PCO_GetColorCorrectionMatrix ( void * ph , double * pdMatrix ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetColorCorrectionMatrix'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr'};fcnNum=fcnNum+1;
%  int PCO_GetDSNUAdjustMode ( void * ph , uint16_t * wDSNUAdjustMode , uint16_t * wReserved ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetDSNUAdjustMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetDSNUAdjustMode ( void * ph , uint16_t wDSNUAdjustMode , uint16_t wReserved ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint16Thunk';fcns.name{fcnNum}='PCO_SetDSNUAdjustMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_InitDSNUAdjustment ( void * ph , uint16_t wDSNUAdjustMode , uint16_t wReserved ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint16Thunk';fcns.name{fcnNum}='PCO_InitDSNUAdjustment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetCDIMode ( void * ph , uint16_t * wCDIMode ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetCDIMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetCDIMode ( void * ph , uint16_t wCDIMode ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetCDIMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetLookupTableInfo ( void * ph , uint16_t wLUTNum , uint16_t * wNumberOfLuts , char * Description , uint16_t wDescLen , uint16_t * wIdentifier , uint8_t * bInputWidth , uint8_t * bOutputWidth , uint16_t * wFormat ); 
fcns.thunkname{fcnNum}='int32voidPtruint16voidPtrcstringuint16voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetLookupTableInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16Ptr', 'cstring', 'uint16', 'uint16Ptr', 'uint8Ptr', 'uint8Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetActiveLookupTable ( void * ph , uint16_t * wIdentifier , uint16_t * wParameter ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetActiveLookupTable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetActiveLookupTable ( void * ph , uint16_t * wIdentifier , uint16_t * wParameter ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_SetActiveLookupTable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetIntensifiedGatingMode ( void * ph , uint16_t * wIntensifiedGatingMode , uint16_t * wReserved ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetIntensifiedGatingMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetIntensifiedGatingMode ( void * ph , uint16_t wIntensifiedGatingMode , uint16_t wReserved ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint16Thunk';fcns.name{fcnNum}='PCO_SetIntensifiedGatingMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetIntensifiedMCP ( void * ph , uint16_t * wIntensifiedVoltage , uint16_t * wReserved , uint32_t * dwIntensifiedPhosphorDecay_us , uint32_t * dwReserved1 , uint32_t * dwReserved2 ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetIntensifiedMCP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetIntensifiedMCP ( void * ph , uint16_t wIntensifiedVoltage , uint16_t wFlags , uint16_t wReserved , uint32_t dwIntensifiedPhosphorDecay_us , uint32_t dwReserved1 , uint32_t dwReserved2 ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint16uint16uint32uint32uint32Thunk';fcns.name{fcnNum}='PCO_SetIntensifiedMCP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16', 'uint16', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  int PCO_GetSensorDarkOffset ( void * ph , uint16_t * pwDarkOffset ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetSensorDarkOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetTimingStruct ( void * ph , PCO_Timing * strTiming ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetTimingStruct'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'PCO_TimingPtr'};fcnNum=fcnNum+1;
%  int PCO_SetTimingStruct ( void * ph , PCO_Timing * strTiming ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_SetTimingStruct'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'PCO_TimingPtr'};fcnNum=fcnNum+1;
%  int PCO_GetDelayExposureTime ( void * ph , uint32_t * dwDelay , uint32_t * dwExposure , uint16_t * wTimeBaseDelay , uint16_t * wTimeBaseExposure ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetDelayExposureTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetDelayExposureTime ( void * ph , uint32_t dwDelay , uint32_t dwExposure , uint16_t wTimeBaseDelay , uint16_t wTimeBaseExposure ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32uint16uint16Thunk';fcns.name{fcnNum}='PCO_SetDelayExposureTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetDelayExposureTimeTable ( void * ph , uint32_t * dwDelay , uint32_t * dwExposure , uint16_t * wTimeBaseDelay , uint16_t * wTimeBaseExposure , uint16_t wCount ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtruint16Thunk';fcns.name{fcnNum}='PCO_GetDelayExposureTimeTable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_SetDelayExposureTimeTable ( void * ph , uint32_t * dwDelay , uint32_t * dwExposure , uint16_t wTimeBaseDelay , uint16_t wTimeBaseExposure , uint16_t wCount ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtruint16uint16uint16Thunk';fcns.name{fcnNum}='PCO_SetDelayExposureTimeTable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32Ptr', 'uint16', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetTriggerMode ( void * ph , uint16_t * wTriggerMode ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetTriggerMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetTriggerMode ( void * ph , uint16_t wTriggerMode ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetTriggerMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_ForceTrigger ( void * ph , uint16_t * wTriggered ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_ForceTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetCameraBusyStatus ( void * ph , uint16_t * wCameraBusyState ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetCameraBusyStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetPowerDownMode ( void * ph , uint16_t * wPowerDownMode ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetPowerDownMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetPowerDownMode ( void * ph , uint16_t wPowerDownMode ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetPowerDownMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetUserPowerDownTime ( void * ph , uint32_t * dwPowerDownTime ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetUserPowerDownTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetUserPowerDownTime ( void * ph , uint32_t dwPowerDownTime ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='PCO_SetUserPowerDownTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%  int PCO_GetExpTrigSignalStatus ( void * ph , uint16_t * wExpTrgSignal ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetExpTrigSignalStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetCOCRuntime ( void * ph , uint32_t * dwTime_s , uint32_t * dwTime_ns ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetCOCRuntime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetFPSExposureMode ( void * ph , uint16_t * wFPSExposureMode , uint32_t * dwFPSExposureTime ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetFPSExposureMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetFPSExposureMode ( void * ph , uint16_t wFPSExposureMode , uint32_t * dwFPSExposureTime ); 
fcns.thunkname{fcnNum}='int32voidPtruint16voidPtrThunk';fcns.name{fcnNum}='PCO_SetFPSExposureMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetModulationMode ( void * ph , uint16_t * wModulationMode , uint32_t * dwPeriodicalTime , uint16_t * wTimebasePeriodical , uint32_t * dwNumberOfExposures , int32_t * lMonitorOffset ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetModulationMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint32Ptr', 'uint16Ptr', 'uint32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetModulationMode ( void * ph , uint16_t wModulationMode , uint32_t dwPeriodicalTime , uint16_t wTimebasePeriodical , uint32_t dwNumberOfExposures , int32_t lMonitorOffset ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint32uint16uint32int32Thunk';fcns.name{fcnNum}='PCO_SetModulationMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint32', 'uint16', 'uint32', 'int32'};fcnNum=fcnNum+1;
%  int PCO_GetFrameRate ( void * ph , uint16_t * wFrameRateStatus , uint32_t * dwFrameRate , uint32_t * dwFrameRateExposure ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetFrameRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetFrameRate ( void * ph , uint16_t * wFrameRateStatus , uint16_t wFrameRateMode , uint32_t * dwFrameRate , uint32_t * dwFrameRateExposure ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint16voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_SetFrameRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetHWIOSignal ( void * ph , uint16_t wSignalNum , PCO_Signal * pstrSignal ); 
fcns.thunkname{fcnNum}='int32voidPtruint16voidPtrThunk';fcns.name{fcnNum}='PCO_GetHWIOSignal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'PCO_SignalPtr'};fcnNum=fcnNum+1;
%  int PCO_SetHWIOSignal ( void * ph , uint16_t wSignalNum , PCO_Signal * pstrSignal ); 
fcns.thunkname{fcnNum}='int32voidPtruint16voidPtrThunk';fcns.name{fcnNum}='PCO_SetHWIOSignal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'PCO_SignalPtr'};fcnNum=fcnNum+1;
%  int PCO_GetHWIOSignalTiming ( void * ph , uint16_t * pwSignalNum , uint16_t * pwSelect , uint32_t * pdwSignalTiming ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetHWIOSignalTiming'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetHWIOSignalTiming ( void * ph , uint16_t wSignalNum , uint16_t wSelect , uint32_t dwSignalTiming ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint16uint32Thunk';fcns.name{fcnNum}='PCO_SetHWIOSignalTiming'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16', 'uint32'};fcnNum=fcnNum+1;
%  int PCO_GetImageTiming ( void * ph , PCO_ImageTiming * pstrImageTiming ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetImageTiming'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'PCO_ImageTimingPtr'};fcnNum=fcnNum+1;
%  int PCO_GetCameraSynchMode ( void * ph , uint16_t * wCameraSynchMode ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetCameraSynchMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetCameraSynchMode ( void * ph , uint16_t wCameraSynchMode ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetCameraSynchMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetFastTimingMode ( void * hCam , uint16_t * wFastTimingMode ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetFastTimingMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetFastTimingMode ( void * hCam , uint16_t wFastTimingMode ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetFastTimingMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetSensorSignalStatus ( void * hCam , uint32_t * dwStatus , uint32_t * dwImageCount , uint32_t * dwReserved1 , uint32_t * dwReserved2 ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetSensorSignalStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetCmosLineTiming ( void * hCam , uint16_t * wParameter , uint16_t * wTimeBase , uint32_t * dwLineTime , uint32_t * dwReserved , uint16_t wReservedLen ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtruint16Thunk';fcns.name{fcnNum}='PCO_GetCmosLineTiming'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'uint32Ptr', 'uint32Ptr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_SetCmosLineTiming ( void * hCam , uint16_t wParameter , uint16_t wTimeBase , uint32_t dwLineTime , uint32_t * dwReserved , uint16_t wReservedLen ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint16uint32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetCmosLineTiming'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16', 'uint32', 'uint32Ptr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetCmosLineExposureDelay ( void * hCam , uint32_t * dwExposureLines , uint32_t * dwDelayLines , uint32_t * dwReserved , uint16_t wReservedLen ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtruint16Thunk';fcns.name{fcnNum}='PCO_GetCmosLineExposureDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_SetCmosLineExposureDelay ( void * hCam , uint32_t dwExposureLines , uint32_t dwDelayLines , uint32_t * dwReserved , uint16_t wReservedLen ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetCmosLineExposureDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'uint32Ptr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetIntensifiedLoopCount ( void * hCam , uint16_t * wIntensifiedLoopCount , uint16_t * wReserved ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetIntensifiedLoopCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetIntensifiedLoopCount ( void * hCam , uint16_t wIntensifiedLoopCount , uint16_t wReserved ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint16Thunk';fcns.name{fcnNum}='PCO_SetIntensifiedLoopCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetSoftFPS ( void * hCam , uint32_t * dwFPS , uint32_t * dwExp , uint16_t * wTimeBaseExp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetSoftFPS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetSoftFPS ( void * hCam , uint32_t * dwFPS , uint32_t dwExp , uint16_t wTimeBaseExp , uint16_t * wFlags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32uint16voidPtrThunk';fcns.name{fcnNum}='PCO_SetSoftFPS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32', 'uint16', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetStorageStruct ( void * ph , PCO_Storage * strStorage ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetStorageStruct'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'PCO_StoragePtr'};fcnNum=fcnNum+1;
%  int PCO_SetStorageStruct ( void * ph , PCO_Storage * strStorage ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_SetStorageStruct'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'PCO_StoragePtr'};fcnNum=fcnNum+1;
%  int PCO_GetCameraRamSize ( void * ph , uint32_t * dwRamSize , uint16_t * wPageSize ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetCameraRamSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetCameraRamSegmentSize ( void * ph , uint32_t * dwRamSegSize ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetCameraRamSegmentSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetCameraRamSegmentSize ( void * ph , uint32_t * dwRamSegSize ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_SetCameraRamSegmentSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_ClearRamSegment ( void * ph ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='PCO_ClearRamSegment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  int PCO_GetActiveRamSegment ( void * ph , uint16_t * wActSeg ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetActiveRamSegment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetActiveRamSegment ( void * ph , uint16_t wActSeg ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetActiveRamSegment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetCompressionMode ( void * ph , uint16_t * wCompressionMode , uint32_t * pdwReserved , uint16_t wReservedLen ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtruint16Thunk';fcns.name{fcnNum}='PCO_GetCompressionMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint32Ptr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_SetCompressionMode ( void * ph , uint16_t wCompressionMode , uint32_t * pdwReserved , uint16_t wReservedLen ); 
fcns.thunkname{fcnNum}='int32voidPtruint16voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetCompressionMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint32Ptr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetMaxNumberOfImagesInSegment ( void * ph , uint32_t * dwMaxNumberImages ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetMaxNumberOfImagesInSegment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetRecordingStruct ( void * ph , PCO_Recording * strRecording ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetRecordingStruct'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'PCO_RecordingPtr'};fcnNum=fcnNum+1;
%  int PCO_SetRecordingStruct ( void * ph , PCO_Recording * strRecording ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_SetRecordingStruct'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'PCO_RecordingPtr'};fcnNum=fcnNum+1;
%  int PCO_GetStorageMode ( void * ph , uint16_t * wStorageMode ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetStorageMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetStorageMode ( void * ph , uint16_t wStorageMode ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetStorageMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetRecorderSubmode ( void * ph , uint16_t * wRecSubmode ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetRecorderSubmode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetRecorderSubmode ( void * ph , uint16_t wRecSubmode ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetRecorderSubmode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetRecordingState ( void * ph , uint16_t * wRecState ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetRecordingState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetRecordingState ( void * ph , uint16_t wRecState ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetRecordingState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_ArmCamera ( void * ph ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='PCO_ArmCamera'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  int PCO_GetAcquireMode ( void * ph , uint16_t * wAcquMode ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetAcquireMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetAcquireMode ( void * ph , uint16_t wAcquMode ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetAcquireMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetAcquireModeEx ( void * ph , uint16_t * wAcquMode , uint32_t * dwNumberImages , uint32_t * dwReserved ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetAcquireModeEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetAcquireModeEx ( void * ph , uint16_t wAcquMode , uint32_t dwNumberImages , uint32_t * dwReserved ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint32voidPtrThunk';fcns.name{fcnNum}='PCO_SetAcquireModeEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint32', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetAcquireControl ( void * ph , uint32_t * dwAcquCtrlFlags , uint32_t * dwReserved , uint16_t wNumReserved ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtruint16Thunk';fcns.name{fcnNum}='PCO_GetAcquireControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32Ptr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_SetAcquireControl ( void * ph , uint32_t dwAcquCtrlFlags , uint32_t * dwReserved , uint16_t wNumReserved ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetAcquireControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32Ptr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetAcqEnblSignalStatus ( void * ph , uint16_t * wAcquEnableState ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetAcqEnblSignalStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetDateTime ( void * ph , uint8_t ucDay , uint8_t ucMonth , uint16_t wYear , uint16_t wHour , uint8_t ucMin , uint8_t ucSec ); 
fcns.thunkname{fcnNum}='int32voidPtruint8uint8uint16uint16uint8uint8Thunk';fcns.name{fcnNum}='PCO_SetDateTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8', 'uint8', 'uint16', 'uint16', 'uint8', 'uint8'};fcnNum=fcnNum+1;
%  int PCO_GetTimestampMode ( void * ph , uint16_t * wTimeStampMode ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetTimestampMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetTimestampMode ( void * ph , uint16_t wTimeStampMode ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetTimestampMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetRecordStopEvent ( void * ph , uint16_t * wRecordStopEventMode , uint32_t * dwRecordStopDelayImages ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetRecordStopEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetRecordStopEvent ( void * ph , uint16_t wRecordStopEventMode , uint32_t dwRecordStopDelayImages ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint32Thunk';fcns.name{fcnNum}='PCO_SetRecordStopEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint32'};fcnNum=fcnNum+1;
%  int PCO_StopRecord ( void * ph , uint16_t * wReserved0 , uint32_t * dwReserved1 ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_StopRecord'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetImageStruct ( void * ph , PCO_Image * strImage ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetImageStruct'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'PCO_ImagePtr'};fcnNum=fcnNum+1;
%  int PCO_GetSegmentStruct ( void * ph , uint16_t wSegment , PCO_Segment * strSegment ); 
fcns.thunkname{fcnNum}='int32voidPtruint16voidPtrThunk';fcns.name{fcnNum}='PCO_GetSegmentStruct'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'PCO_SegmentPtr'};fcnNum=fcnNum+1;
%  int PCO_GetSegmentImageSettings ( void * ph , uint16_t wSegment , uint16_t * wXRes , uint16_t * wYRes , uint16_t * wBinHorz , uint16_t * wBinVert , uint16_t * wRoiX0 , uint16_t * wRoiY0 , uint16_t * wRoiX1 , uint16_t * wRoiY1 ); 
fcns.thunkname{fcnNum}='int32voidPtruint16voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetSegmentImageSettings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetNumberOfImagesInSegment ( void * ph , uint16_t wSegment , uint32_t * dwValidImageCnt , uint32_t * dwMaxImageCnt ); 
fcns.thunkname{fcnNum}='int32voidPtruint16voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetNumberOfImagesInSegment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetBitAlignment ( void * ph , uint16_t * wBitAlignment ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetBitAlignment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetBitAlignment ( void * ph , uint16_t wBitAlignment ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetBitAlignment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetHotPixelCorrectionMode ( void * ph , uint16_t * wHotPixelCorrectionMode ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetHotPixelCorrectionMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetHotPixelCorrectionMode ( void * ph , uint16_t wHotPixelCorrectionMode ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_SetHotPixelCorrectionMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_PlayImagesFromSegmentHDSDI ( void * ph , uint16_t wSegment , uint16_t wInterface , uint16_t wMode , uint16_t wSpeed , uint32_t dwRangeLow , uint32_t dwRangeHigh , uint32_t dwStartPos ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint16uint16uint16uint32uint32uint32Thunk';fcns.name{fcnNum}='PCO_PlayImagesFromSegmentHDSDI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16', 'uint16', 'uint16', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  int PCO_GetPlayPositionHDSDI ( void * ph , uint16_t * wStatus , uint32_t * dwPlayPosition ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetPlayPositionHDSDI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetInterfaceOutputFormat ( void * ph , uint16_t * wDestInterface , uint16_t * wFormat , uint16_t * wReserved1 , uint16_t * wReserved2 ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetInterfaceOutputFormat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetInterfaceOutputFormat ( void * ph , uint16_t wDestInterface , uint16_t wFormat , uint16_t wReserved1 , uint16_t wReserved2 ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint16uint16uint16Thunk';fcns.name{fcnNum}='PCO_SetInterfaceOutputFormat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetMetaDataMode ( void * ph , uint16_t * wMetaDataMode , uint16_t * wMetaDataSize , uint16_t * wMetaDataVersion ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetMetaDataMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetMetaDataMode ( void * ph , uint16_t wMetaDataMode , uint16_t * wMetaDataSize , uint16_t * wMetaDataVersion ); 
fcns.thunkname{fcnNum}='int32voidPtruint16voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_SetMetaDataMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetColorSettings ( void * ph , PCO_Image_ColorSet * strColorSet ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_SetColorSettings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'PCO_Image_ColorSetPtr'};fcnNum=fcnNum+1;
%  int PCO_GetColorSettings ( void * ph , PCO_Image_ColorSet * strColorSet ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetColorSettings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'PCO_Image_ColorSetPtr'};fcnNum=fcnNum+1;
%  int PCO_DoWhiteBalance ( void * ph , uint16_t wMode , uint16_t * wParam , uint16_t wParamLen ); 
fcns.thunkname{fcnNum}='int32voidPtruint16voidPtruint16Thunk';fcns.name{fcnNum}='PCO_DoWhiteBalance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16Ptr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_OpenCamera ( void * * ph , uint16_t wCamNum ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_OpenCamera'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtrPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_OpenCameraEx ( void * * ph , PCO_OpenStruct * strOpenStruct ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_OpenCameraEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtrPtr', 'PCO_OpenStructPtr'};fcnNum=fcnNum+1;
%  int PCO_CloseCamera ( void * ph ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='PCO_CloseCamera'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  int PCO_AllocateBuffer ( void * ph , int16_t * sBufNr , uint32_t size , uint16_t ** wBuf , void * * hEvent ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_AllocateBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int16Ptr', 'uint32', 'uint16PtrPtr', 'voidPtrPtr'};fcnNum=fcnNum+1;
%  int PCO_WaitforBuffer ( void * ph , int nr_of_buffer , PCO_Buflist * bl , int timeout ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='PCO_WaitforBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'PCO_BuflistPtr', 'int32'};fcnNum=fcnNum+1;
%  int PCO_GetBuffer ( void * ph , int16_t sBufNr , uint16_t ** wBuf , void * * hEvent ); 
fcns.thunkname{fcnNum}='int32voidPtrint16voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int16', 'uint16PtrPtr', 'voidPtrPtr'};fcnNum=fcnNum+1;
%  int PCO_FreeBuffer ( void * ph , int16_t sBufNr ); 
fcns.thunkname{fcnNum}='int32voidPtrint16Thunk';fcns.name{fcnNum}='PCO_FreeBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int16'};fcnNum=fcnNum+1;
%  int PCO_AddBuffer ( void * ph , uint32_t dw1stImage , uint32_t dwLastImage , int16_t sBufNr ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32int16Thunk';fcns.name{fcnNum}='PCO_AddBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'int16'};fcnNum=fcnNum+1;
%  int PCO_AddBufferEx ( void * ph , uint32_t dw1stImage , uint32_t dwLastImage , int16_t sBufNr , uint16_t wXRes , uint16_t wYRes , uint16_t wBitPerPixel ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32int16uint16uint16uint16Thunk';fcns.name{fcnNum}='PCO_AddBufferEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32', 'int16', 'uint16', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetBufferStatus ( void * ph , int16_t sBufNr , uint32_t * dwStatusDll , uint32_t * dwStatusDrv ); 
fcns.thunkname{fcnNum}='int32voidPtrint16voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetBufferStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int16', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_CancelImages ( void * ph ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='PCO_CancelImages'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  int PCO_RemoveBuffer ( void * ph ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='PCO_RemoveBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  int PCO_GetImage ( void * ph , uint16_t wSegment , uint32_t dw1stImage , uint32_t dwLastImage , int16_t sBufNr ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint32uint32int16Thunk';fcns.name{fcnNum}='PCO_GetImage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint32', 'uint32', 'int16'};fcnNum=fcnNum+1;
%  int PCO_GetImageEx ( void * ph , uint16_t wSegment , uint32_t dw1stImage , uint32_t dwLastImage , int16_t sBufNr , uint16_t wXRes , uint16_t wYRes , uint16_t wBitPerPixel ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint32uint32int16uint16uint16uint16Thunk';fcns.name{fcnNum}='PCO_GetImageEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint32', 'uint32', 'int16', 'uint16', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetPendingBuffer ( void * ph , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetPendingBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
%  int PCO_CheckDeviceAvailability ( void * ph , uint16_t wNum ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='PCO_CheckDeviceAvailability'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_SetTransferParameter ( void * ph , void * buffer , int ilen ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PCO_SetTransferParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
%  int PCO_GetTransferParameter ( void * ph , void * buffer , int ilen ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PCO_GetTransferParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
%  int PCO_SetTransferParametersAuto ( void * ph , void * buffer , int ilen ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PCO_SetTransferParametersAuto'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
%  int PCO_CamLinkSetImageParameters ( void * ph , uint16_t wxres , uint16_t wyres ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint16Thunk';fcns.name{fcnNum}='PCO_CamLinkSetImageParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_SetImageParameters ( void * ph , uint16_t wxres , uint16_t wyres , uint32_t dwflags , void * param , int ilen ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint16uint32voidPtrint32Thunk';fcns.name{fcnNum}='PCO_SetImageParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16', 'uint32', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
%  int PCO_SetTimeouts ( void * ph , void * buf_in , unsigned int size_in ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='PCO_SetTimeouts'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%  int PCO_GetImageTransferMode ( void * ph , void * param , int ilen ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PCO_GetImageTransferMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
%  int PCO_SetImageTransferMode ( void * ph , void * param , int ilen ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PCO_SetImageTransferMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
%  int PCO_AddBufferExtern ( void * ph , void * hEvent , uint16_t wActSeg , uint32_t dw1stImage , uint32_t dwLastImage , uint32_t dwSynch , void * pBuf , uint32_t dwLen , uint32_t * dwStatus ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint16uint32uint32uint32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='PCO_AddBufferExtern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'uint16', 'uint32', 'uint32', 'uint32', 'voidPtr', 'uint32', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetMetaData ( void * ph , int16_t sBufNr , PCO_METADATA_STRUCT * pMetaData , uint32_t dwReserved1 , uint32_t dwReserved2 ); 
fcns.thunkname{fcnNum}='int32voidPtrint16voidPtruint32uint32Thunk';fcns.name{fcnNum}='PCO_GetMetaData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int16', 'PCO_METADATA_STRUCTPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  int PCO_GetMetaDataExtern ( void * ph , void * pBuf , PCO_METADATA_STRUCT * pMetaData , uint32_t dwReserved1 , uint32_t dwReserved2 ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtruint32uint32Thunk';fcns.name{fcnNum}='PCO_GetMetaDataExtern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'PCO_METADATA_STRUCTPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  int PCO_GetTimeStamp ( void * ph , int16_t sBufNr , uint16_t * wBuf , PCO_TIMESTAMP_STRUCT * strTimeStamp ); 
fcns.thunkname{fcnNum}='int32voidPtrint16voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetTimeStamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int16', 'uint16Ptr', 'PCO_TIMESTAMP_STRUCTPtr'};fcnNum=fcnNum+1;
%  int PCO_GetDeviceStatus ( void * ph , uint16_t wNum , uint32_t * dwStatus , uint16_t wStatusLen ); 
fcns.thunkname{fcnNum}='int32voidPtruint16voidPtruint16Thunk';fcns.name{fcnNum}='PCO_GetDeviceStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint32Ptr', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_ControlCommandCall ( void * ph , void * buf_in , unsigned int size_in , void * buf_out , unsigned int size_out ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32voidPtruint32Thunk';fcns.name{fcnNum}='PCO_ControlCommandCall'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%  int PCO_ResetLib (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='PCO_ResetLib'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int PCO_InitializeLib (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='PCO_InitializeLib'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int PCO_CleanupLib (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='PCO_CleanupLib'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int PCO_EnableSoftROI ( void * ph , uint16_t wSoftROIFlags , void * param , int ilen ); 
fcns.thunkname{fcnNum}='int32voidPtruint16voidPtrint32Thunk';fcns.name{fcnNum}='PCO_EnableSoftROI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
%  int PCO_GetAPIManagement ( void * ph , uint16_t * wFlags , PCO_APIManagement * pstrApi ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetAPIManagement'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'PCO_APIManagementPtr'};fcnNum=fcnNum+1;
%  void PCO_GetErrorTextSDK ( uint32_t dwError , char * pszErrorString , uint32_t dwErrorStringLength ); 
fcns.thunkname{fcnNum}='voiduint32cstringuint32Thunk';fcns.name{fcnNum}='PCO_GetErrorTextSDK'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint32', 'cstring', 'uint32'};fcnNum=fcnNum+1;
%  int PCO_GetVersion_SDK ( const char * pszInterfaceName , int iNameLength , int * piMajor , int * piMinor , int * piPatch , int * piBuild ); 
fcns.thunkname{fcnNum}='int32cstringint32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetVersion_SDK'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetVersionInfoSC2_Cam ( char * pszName , int iNameLength , char * pszPath , int iPathLength , int * piMajor , int * piMinor , int * piPatch , int * piBuild ); 
fcns.thunkname{fcnNum}='int32cstringint32cstringint32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetVersionInfoSC2_Cam'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32', 'cstring', 'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetFlimModulationParameter ( void * ph , uint16_t * wSourceSelect , uint16_t * wOutputWaveform , uint16_t * wReserved1 , uint16_t * wReserved2 ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetFlimModulationParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetFlimModulationParameter ( void * ph , uint16_t wSourceSelect , uint16_t wOutputWaveform , uint16_t wReserved1 , uint16_t wReserved2 ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint16uint16uint16Thunk';fcns.name{fcnNum}='PCO_SetFlimModulationParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetFlimPhaseSequenceParameter ( void * ph , uint16_t * wPhaseNumber , uint16_t * wPhaseSymmetry , uint16_t * wPhaseOrder , uint16_t * wTapSelect , uint16_t * wReserved1 , uint16_t * wReserved2 ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetFlimPhaseSequenceParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetFlimPhaseSequenceParameter ( void * ph , uint16_t wPhaseNumber , uint16_t wPhaseSymmetry , uint16_t wPhaseOrder , uint16_t wTapSelect , uint16_t wReserved1 , uint16_t wReserved2 ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint16uint16uint16uint16uint16Thunk';fcns.name{fcnNum}='PCO_SetFlimPhaseSequenceParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16', 'uint16', 'uint16', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetFlimImageProcessingFlow ( void * ph , uint16_t * wAsymmetryCorrection , uint16_t * wCalculationMode , uint16_t * wReferencingMode , uint16_t * wThresholdLow , uint16_t * wThresholdHigh , uint16_t * wOutputMode , uint16_t * wReserved1 , uint16_t * wReserved2 , uint16_t * wReserved3 , uint16_t * wReserved4 ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetFlimImageProcessingFlow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetFlimImageProcessingFlow ( void * ph , uint16_t wAsymmetryCorrection , uint16_t wCalculationMode , uint16_t wReferencingMode , uint16_t wThresholdLow , uint16_t wThresholdHigh , uint16_t wOutputMode , uint16_t wReserved1 , uint16_t wReserved2 , uint16_t wReserved3 , uint16_t wReserved4 ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint16uint16uint16uint16uint16uint16uint16uint16uint16Thunk';fcns.name{fcnNum}='PCO_SetFlimImageProcessingFlow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint16', 'uint16', 'uint16', 'uint16', 'uint16', 'uint16', 'uint16', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  int PCO_GetFlimMasterModulationFrequency ( void * ph , uint32_t * dwFrequency ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetFlimMasterModulationFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetFlimMasterModulationFrequency ( void * ph , uint32_t dwFrequency ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='PCO_SetFlimMasterModulationFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%  int PCO_GetFlimRelativePhase ( void * ph , uint32_t * dwPhaseMilliDeg ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetFlimRelativePhase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetFlimRelativePhase ( void * ph , uint32_t dwPhaseMilliDeg ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='PCO_SetFlimRelativePhase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
%  int PCO_InitLensControl ( void * hCamera , void * * phLensControl ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_InitLensControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtr'};fcnNum=fcnNum+1;
%  int PCO_CleanupLensControl (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='PCO_CleanupLensControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int PCO_CloseLensControl ( void * hLensControl ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='PCO_CloseLensControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  int PCO_GetLensFocus ( void * hLens , int32_t * lFocusPos , uint32_t * dwflags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetLensFocus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetLensFocus ( void * hLens , int32_t * lFocusPos , uint32_t dwflagsin , uint32_t * dwflagsout ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32voidPtrThunk';fcns.name{fcnNum}='PCO_SetLensFocus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'uint32', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetAperture ( void * hLens , uint16_t * wAperturePos , uint32_t * dwflags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetAperture'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetAperture ( void * hLens , uint16_t * wAperturePos , uint32_t dwflagsin , uint32_t * dwflagsout ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32voidPtrThunk';fcns.name{fcnNum}='PCO_SetAperture'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint32', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_GetApertureF ( void * hLens , uint32_t * dwfAperturePos , uint16_t * wAperturePos , uint32_t * dwflags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PCO_GetApertureF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_SetApertureF ( void * hLens , uint32_t * dwfAperturePos , uint32_t dwflagsin , uint32_t * dwflagsout ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32voidPtrThunk';fcns.name{fcnNum}='PCO_SetApertureF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int PCO_SendBirgerCommand ( void * hLens , PCO_Birger * pstrBirger , char * szcmd , int inumdelim ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='PCO_SendBirgerCommand'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'PCO_BirgerPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
structs.PCO_Buflist.packing=1;
structs.PCO_Buflist.members=struct('sBufNr_1', 'int16', 'ZZwAlignDummy_1', 'uint16', 'dwStatusDll_1', 'uint32', 'dwStatusDrv_1', 'uint32', 'sBufNr_2', 'int16', 'ZZwAlignDummy_2', 'uint16', 'dwStatusDll_2', 'uint32', 'dwStatusDrv_2', 'uint32', 'sBufNr_3', 'int16', 'ZZwAlignDummy_3', 'uint16', 'dwStatusDll_3', 'uint32', 'dwStatusDrv_3', 'uint32', 'sBufNr_4', 'int16', 'ZZwAlignDummy_4', 'uint16', 'dwStatusDll_4', 'uint32', 'dwStatusDrv_4', 'uint32', 'sBufNr_5', 'int16', 'ZZwAlignDummy_5', 'uint16', 'dwStatusDll_5', 'uint32', 'dwStatusDrv_5', 'uint32', 'sBufNr_6', 'int16', 'ZZwAlignDummy_6', 'uint16', 'dwStatusDll_6', 'uint32', 'dwStatusDrv_6', 'uint32', 'sBufNr_7', 'int16', 'ZZwAlignDummy_7', 'uint16', 'dwStatusDll_7', 'uint32', 'dwStatusDrv_7', 'uint32', 'sBufNr_8', 'int16', 'ZZwAlignDummy_8', 'uint16', 'dwStatusDll_8', 'uint32', 'dwStatusDrv_8', 'uint32');
structs.PCO_OpenStruct.packing=1;
structs.PCO_OpenStruct.members=struct('wSize', 'uint16', 'wInterfaceType', 'uint16', 'wCameraNumber', 'uint16', 'wCameraNumAtInterface', 'uint16', 'wOpenFlags', 'uint16#10', 'dwOpenFlags', 'uint32#5', 'wOpenPtr1', 'voidPtr', 'wOpenPtr2', 'voidPtr', 'wOpenPtr3', 'voidPtr', 'wOpenPtr4', 'voidPtr', 'wOpenPtr5', 'voidPtr', 'wOpenPtr6', 'voidPtr', 'zzwDummy', 'uint16#8');
structs.PCO_SC2_Hardware_DESC.packing=1;
structs.PCO_SC2_Hardware_DESC.members=struct('szName', 'int8#16', 'wBatchNo', 'uint16', 'wRevision', 'uint16', 'wVariant', 'uint16', 'ZZwDummy', 'uint16#20');
structs.PCO_SC2_Firmware_DESC.packing=1;
structs.PCO_SC2_Firmware_DESC.members=struct('szName', 'int8#16', 'bMinorRev', 'uint8', 'bMajorRev', 'uint8', 'wVariant', 'uint16', 'ZZwDummy', 'uint16#22');
structs.PCO_HW_Vers.packing=1;
structs.PCO_HW_Vers.members=struct('BoardNum', 'uint16', 'Board1', 'PCO_SC2_Hardware_DESC', 'Board2', 'PCO_SC2_Hardware_DESC', 'Board3', 'PCO_SC2_Hardware_DESC', 'Board4', 'PCO_SC2_Hardware_DESC', 'Board5', 'PCO_SC2_Hardware_DESC', 'Board6', 'PCO_SC2_Hardware_DESC', 'Board7', 'PCO_SC2_Hardware_DESC', 'Board8', 'PCO_SC2_Hardware_DESC', 'Board9', 'PCO_SC2_Hardware_DESC', 'Board10', 'PCO_SC2_Hardware_DESC');
structs.PCO_FW_Vers.packing=1;
structs.PCO_FW_Vers.members=struct('DeviceNum', 'uint16', 'Device1', 'PCO_SC2_Firmware_DESC', 'Device2', 'PCO_SC2_Firmware_DESC', 'Device3', 'PCO_SC2_Firmware_DESC', 'Device4', 'PCO_SC2_Firmware_DESC', 'Device5', 'PCO_SC2_Firmware_DESC', 'Device6', 'PCO_SC2_Firmware_DESC', 'Device7', 'PCO_SC2_Firmware_DESC', 'Device8', 'PCO_SC2_Firmware_DESC', 'Device9', 'PCO_SC2_Firmware_DESC', 'Device10', 'PCO_SC2_Firmware_DESC');
structs.PCO_CameraType.packing=1;
structs.PCO_CameraType.members=struct('wSize', 'uint16', 'wCamType', 'uint16', 'wCamSubType', 'uint16', 'ZZwAlignDummy1', 'uint16', 'dwSerialNumber', 'uint32', 'dwHWVersion', 'uint32', 'dwFWVersion', 'uint32', 'wInterfaceType', 'uint16', 'strHardwareVersion', 'PCO_HW_Vers', 'strFirmwareVersion', 'PCO_FW_Vers', 'ZZwDummy', 'uint16#39');
structs.PCO_General.packing=1;
structs.PCO_General.members=struct('wSize', 'uint16', 'ZZwAlignDummy1', 'uint16', 'strCamType', 'PCO_CameraType', 'dwCamHealthWarnings', 'uint32', 'dwCamHealthErrors', 'uint32', 'dwCamHealthStatus', 'uint32', 'sCCDTemperature', 'int16', 'sCamTemperature', 'int16', 'sPowerSupplyTemperature', 'int16', 'ZZwDummy', 'uint16#37');
structs.PCO_Description.packing=1;
structs.PCO_Description.members=struct('wSize', 'uint16', 'wSensorTypeDESC', 'uint16', 'wSensorSubTypeDESC', 'uint16', 'wMaxHorzResStdDESC', 'uint16', 'wMaxVertResStdDESC', 'uint16', 'wMaxHorzResExtDESC', 'uint16', 'wMaxVertResExtDESC', 'uint16', 'wDynResDESC', 'uint16', 'wMaxBinHorzDESC', 'uint16', 'wBinHorzSteppingDESC', 'uint16', 'wMaxBinVertDESC', 'uint16', 'wBinVertSteppingDESC', 'uint16', 'wRoiHorStepsDESC', 'uint16', 'wRoiVertStepsDESC', 'uint16', 'wNumADCsDESC', 'uint16', 'wMinSizeHorzDESC', 'uint16', 'dwPixelRateDESC', 'uint32#4', 'ZZdwDummypr', 'uint32#20', 'wConvFactDESC', 'uint16#4', 'sCoolingSetpoints', 'int16#10', 'ZZwDummycv', 'uint16#8', 'wSoftRoiHorStepsDESC', 'uint16', 'wSoftRoiVertStepsDESC', 'uint16', 'wIRDESC', 'uint16', 'wMinSizeVertDESC', 'uint16', 'dwMinDelayDESC', 'uint32', 'dwMaxDelayDESC', 'uint32', 'dwMinDelayStepDESC', 'uint32', 'dwMinExposureDESC', 'uint32', 'dwMaxExposureDESC', 'uint32', 'dwMinExposureStepDESC', 'uint32', 'dwMinDelayIRDESC', 'uint32', 'dwMaxDelayIRDESC', 'uint32', 'dwMinExposureIRDESC', 'uint32', 'dwMaxExposureIRDESC', 'uint32', 'wTimeTableDESC', 'uint16', 'wDoubleImageDESC', 'uint16', 'sMinCoolSetDESC', 'int16', 'sMaxCoolSetDESC', 'int16', 'sDefaultCoolSetDESC', 'int16', 'wPowerDownModeDESC', 'uint16', 'wOffsetRegulationDESC', 'uint16', 'wColorPatternDESC', 'uint16', 'wPatternTypeDESC', 'uint16', 'wDummy1', 'uint16', 'wDummy2', 'uint16', 'wNumCoolingSetpoints', 'uint16', 'dwGeneralCapsDESC1', 'uint32', 'dwGeneralCapsDESC2', 'uint32', 'dwExtSyncFrequency', 'uint32#4', 'dwGeneralCapsDESC3', 'uint32', 'dwGeneralCapsDESC4', 'uint32', 'ZZdwDummy', 'uint32#40');
structs.PCO_Description2.packing=1;
structs.PCO_Description2.members=struct('wSize', 'uint16', 'ZZwAlignDummy1', 'uint16', 'dwMinPeriodicalTimeDESC2', 'uint32', 'dwMaxPeriodicalTimeDESC2', 'uint32', 'dwMinPeriodicalConditionDESC2', 'uint32', 'dwMaxNumberOfExposuresDESC2', 'uint32', 'lMinMonitorSignalOffsetDESC2', 'int32', 'dwMaxMonitorSignalOffsetDESC2', 'uint32', 'dwMinPeriodicalStepDESC2', 'uint32', 'dwStartTimeDelayDESC2', 'uint32', 'dwMinMonitorStepDESC2', 'uint32', 'dwMinDelayModDESC2', 'uint32', 'dwMaxDelayModDESC2', 'uint32', 'dwMinDelayStepModDESC2', 'uint32', 'dwMinExposureModDESC2', 'uint32', 'dwMaxExposureModDESC2', 'uint32', 'dwMinExposureStepModDESC2', 'uint32', 'dwModulateCapsDESC2', 'uint32', 'dwReserved', 'uint32#16', 'ZZdwDummy', 'uint32#41');
structs.PCO_Description_Intensified.packing=1;
structs.PCO_Description_Intensified.members=struct('wSize', 'uint16', 'wChannelNumberIntensifiedDESC', 'uint16', 'wNumberOfChannelsIntensifiedDESC', 'uint16', 'wMinVoltageIntensifiedDESC', 'uint16', 'wMaxVoltageIntensifiedDESC', 'uint16', 'wVoltageStepIntensifiedDESC', 'uint16', 'wExtendedMinVoltageIntensifiedDESC', 'uint16', 'wMaxLoopCountIntensifiedDESC', 'uint16', 'dwMinPhosphorDecayIntensified_ns_DESC', 'uint32', 'dwMaxPhosphorDecayIntensified_ms_DESC', 'uint32', 'dwFlagsIntensifiedDESC', 'uint32', 'szIntensifierTypeDESC', 'int8#24', 'dwMCP_RectangleXL_DESC', 'uint32', 'dwMCP_RectangleXR_DESC', 'uint32', 'dwMCP_RectangleYT_DESC', 'uint32', 'dwMCP_RectangleYB_DESC', 'uint32', 'ZZdwDummy', 'uint32#23');
structs.PCO_Description3.packing=1;
structs.PCO_Description3.members=struct('wSize', 'uint16', 'wDarkOffsetDESC3', 'uint16', 'dwGeneralCapsDESC5', 'uint32', 'dwGeneralCapsDESC6', 'uint32', 'dwGeneralCapsDESC7', 'uint32', 'dwGeneralCapsDESC8', 'uint32', 'wMinHorzResStdDESC3', 'uint16', 'wMinVertResStdDESC3', 'uint16', 'wMinHorzResExtDESC3', 'uint16', 'wMinVertResExtDESC3', 'uint16', 'wPixelsize_horzDESC3', 'uint16', 'wPixelsize_vertDESC3', 'uint16', 'sMinSensorTempWarningDESC3', 'int16', 'sMaxSensorTempWarningDESC3', 'int16', 'sMinCameraTempWarningDESC3', 'int16', 'sMaxCameraTempWarningDESC3', 'int16', 'sMinPowerTempWarningDESC3', 'int16', 'sMaxPowerTempWarningDESC3', 'int16', 'wMinPowerVoltageWarningDESC3', 'uint16', 'wMaxPowerVoltageWarningDESC3', 'uint16', 'sMinSensorTempErrorDESC3', 'int16', 'sMaxSensorTempErrorDESC3', 'int16', 'sMinCameraTempErrorDESC3', 'int16', 'sMaxCameraTempErrorDESC3', 'int16', 'sMinPowerTempErrorDESC3', 'int16', 'sMaxPowerTempErrorDESC3', 'int16', 'wMinPowerVoltageErrorDESC3', 'uint16', 'wMaxPowerVoltageErrorDESC3', 'uint16', 'dwReserved', 'uint32#32');
structs.PCO_DescriptionEx.packing=1;
structs.PCO_DescriptionEx.members=struct('wSize', 'uint16');
structs.PCO_Single_Signal_Desc.packing=1;
structs.PCO_Single_Signal_Desc.members=struct('wSize', 'uint16', 'ZZwAlignDummy1', 'uint16', 'strSignalName', 'int8#100', 'wSignalDefinitions', 'uint16', 'wSignalTypes', 'uint16', 'wSignalPolarity', 'uint16', 'wSignalFilter', 'uint16', 'dwDummy', 'uint32#22');
structs.PCO_Signal_Description.packing=1;
structs.PCO_Signal_Description.members=struct('wSize', 'uint16', 'wNumOfSignals', 'uint16', 'strSingeSignalDesc1', 'PCO_Single_Signal_Desc', 'strSingeSignalDesc2', 'PCO_Single_Signal_Desc', 'strSingeSignalDesc3', 'PCO_Single_Signal_Desc', 'strSingeSignalDesc4', 'PCO_Single_Signal_Desc', 'strSingeSignalDesc5', 'PCO_Single_Signal_Desc', 'strSingeSignalDesc6', 'PCO_Single_Signal_Desc', 'strSingeSignalDesc7', 'PCO_Single_Signal_Desc', 'strSingeSignalDesc8', 'PCO_Single_Signal_Desc', 'strSingeSignalDesc9', 'PCO_Single_Signal_Desc', 'strSingeSignalDesc10', 'PCO_Single_Signal_Desc', 'strSingeSignalDesc11', 'PCO_Single_Signal_Desc', 'strSingeSignalDesc12', 'PCO_Single_Signal_Desc', 'strSingeSignalDesc13', 'PCO_Single_Signal_Desc', 'strSingeSignalDesc14', 'PCO_Single_Signal_Desc', 'strSingeSignalDesc15', 'PCO_Single_Signal_Desc', 'strSingeSignalDesc16', 'PCO_Single_Signal_Desc', 'strSingeSignalDesc17', 'PCO_Single_Signal_Desc', 'strSingeSignalDesc18', 'PCO_Single_Signal_Desc', 'strSingeSignalDesc19', 'PCO_Single_Signal_Desc', 'strSingeSignalDesc20', 'PCO_Single_Signal_Desc', 'dwDummy', 'uint32#524');
structs.PCO_Sensor.packing=1;
structs.PCO_Sensor.members=struct('wSize', 'uint16', 'ZZwAlignDummy1', 'uint16', 'strDescription', 'PCO_Description', 'strDescription2', 'PCO_Description2', 'strDescriptionIntensified', 'PCO_Description_Intensified', 'strDescription3', 'PCO_Description3', 'ZZdwDummy2', 'uint32#168', 'wSensorformat', 'uint16', 'wRoiX0', 'uint16', 'wRoiY0', 'uint16', 'wRoiX1', 'uint16', 'wRoiY1', 'uint16', 'wBinHorz', 'uint16', 'wBinVert', 'uint16', 'wIntensifiedFlags', 'uint16', 'dwPixelRate', 'uint32', 'wConvFact', 'uint16', 'wDoubleImage', 'uint16', 'wADCOperation', 'uint16', 'wIR', 'uint16', 'sCoolSet', 'int16', 'wOffsetRegulation', 'uint16', 'wNoiseFilterMode', 'uint16', 'wFastReadoutMode', 'uint16', 'wDSNUAdjustMode', 'uint16', 'wCDIMode', 'uint16', 'wIntensifiedVoltage', 'uint16', 'wIntensifiedGatingMode', 'uint16', 'dwIntensifiedPhosphorDecay_us', 'uint32', 'ZZwDummy', 'uint16#32', 'strSignalDesc', 'PCO_Signal_Description', 'ZZdwDummy', 'uint32#7');
structs.PCO_Signal.packing=1;
structs.PCO_Signal.members=struct('wSize', 'uint16', 'wSignalNum', 'uint16', 'wEnabled', 'uint16', 'wType', 'uint16', 'wPolarity', 'uint16', 'wFilterSetting', 'uint16', 'wSelected', 'uint16', 'ZZwReserved', 'uint16', 'dwParameter', 'uint32#4', 'dwSignalFunctionality', 'uint32#4', 'ZZdwReserved', 'uint32#3');
structs.PCO_ImageTiming.packing=1;
structs.PCO_ImageTiming.members=struct('wSize', 'uint16', 'wDummy', 'uint16', 'FrameTime_ns', 'uint32', 'FrameTime_s', 'uint32', 'ExposureTime_ns', 'uint32', 'ExposureTime_s', 'uint32', 'TriggerSystemDelay_ns', 'uint32', 'TriggerSystemJitter_ns', 'uint32', 'TriggerDelay_ns', 'uint32', 'TriggerDelay_s', 'uint32', 'ZZdwDummy', 'uint32#11');
structs.PCO_Timing.packing=1;
structs.PCO_Timing.members=struct('wSize', 'uint16', 'wTimeBaseDelay', 'uint16', 'wTimeBaseExposure', 'uint16', 'wCMOSParameter', 'uint16', 'dwCMOSDelayLines', 'uint32', 'dwCMOSExposureLines', 'uint32', 'dwDelayTable', 'uint32#16', 'ZZdwDummy1', 'uint32#110', 'dwCMOSLineTimeMin', 'uint32', 'dwCMOSLineTimeMax', 'uint32', 'dwCMOSLineTime', 'uint32', 'wCMOSTimeBase', 'uint16', 'wIntensifiedLoopCount', 'uint16', 'dwExposureTable', 'uint32#16', 'ZZdwDummy2', 'uint32#110', 'dwCMOSFlags', 'uint32', 'dwCMOSLineTimeMinStep', 'uint32', 'wTriggerMode', 'uint16', 'wForceTrigger', 'uint16', 'wCameraBusyStatus', 'uint16', 'wPowerDownMode', 'uint16', 'dwPowerDownTime', 'uint32', 'wExpTrgSignal', 'uint16', 'wFPSExposureMode', 'uint16', 'dwFPSExposureTime', 'uint32', 'wModulationMode', 'uint16', 'wCameraSynchMode', 'uint16', 'dwPeriodicalTime', 'uint32', 'wTimeBasePeriodical', 'uint16', 'ZZwDummy3', 'uint16', 'dwNumberOfExposures', 'uint32', 'lMonitorOffset', 'int32', 'strSignal1', 'PCO_Signal', 'strSignal2', 'PCO_Signal', 'strSignal3', 'PCO_Signal', 'strSignal4', 'PCO_Signal', 'strSignal5', 'PCO_Signal', 'strSignal6', 'PCO_Signal', 'strSignal7', 'PCO_Signal', 'strSignal8', 'PCO_Signal', 'strSignal9', 'PCO_Signal', 'strSignal10', 'PCO_Signal', 'strSignal11', 'PCO_Signal', 'strSignal12', 'PCO_Signal', 'strSignal13', 'PCO_Signal', 'strSignal14', 'PCO_Signal', 'strSignal15', 'PCO_Signal', 'strSignal16', 'PCO_Signal', 'strSignal17', 'PCO_Signal', 'strSignal18', 'PCO_Signal', 'strSignal19', 'PCO_Signal', 'strSignal20', 'PCO_Signal', 'wStatusFrameRate', 'uint16', 'wFrameRateMode', 'uint16', 'dwFrameRate', 'uint32', 'dwFrameRateExposure', 'uint32', 'wTimingControlMode', 'uint16', 'wFastTimingMode', 'uint16', 'ZZwDummy', 'uint16#24');
structs.PCO_Storage.packing=1;
structs.PCO_Storage.members=struct('wSize', 'uint16', 'ZZwAlignDummy1', 'uint16', 'dwRamSize', 'uint32', 'wPageSize', 'uint16', 'ZZwAlignDummy4', 'uint16', 'dwRamSegSize', 'uint32#4', 'ZZdwDummyrs', 'uint32#20', 'wActSeg', 'uint16', 'wCompressionMode', 'uint16', 'ZZwDummy', 'uint16#38');
structs.PCO_Recording.packing=1;
structs.PCO_Recording.members=struct('wSize', 'uint16', 'wStorageMode', 'uint16', 'wRecSubmode', 'uint16', 'wRecState', 'uint16', 'wAcquMode', 'uint16', 'wAcquEnableStatus', 'uint16', 'ucDay', 'uint8', 'ucMonth', 'uint8', 'wYear', 'uint16', 'wHour', 'uint16', 'ucMin', 'uint8', 'ucSec', 'uint8', 'wTimeStampMode', 'uint16', 'wRecordStopEventMode', 'uint16', 'dwRecordStopDelayImages', 'uint32', 'wMetaDataMode', 'uint16', 'wMetaDataSize', 'uint16', 'wMetaDataVersion', 'uint16', 'ZZwDummy1', 'uint16', 'dwAcquModeExNumberImages', 'uint32', 'dwAcquModeExReserved', 'uint32#4', 'ZZwDummy', 'uint16#22');
structs.PCO_Segment.packing=1;
structs.PCO_Segment.members=struct('wSize', 'uint16', 'wXRes', 'uint16', 'wYRes', 'uint16', 'wBinHorz', 'uint16', 'wBinVert', 'uint16', 'wRoiX0', 'uint16', 'wRoiY0', 'uint16', 'wRoiX1', 'uint16', 'wRoiY1', 'uint16', 'ZZwAlignDummy1', 'uint16', 'dwValidImageCnt', 'uint32', 'dwMaxImageCnt', 'uint32', 'wRoiSoftX0', 'uint16', 'wRoiSoftY0', 'uint16', 'wRoiSoftX1', 'uint16', 'wRoiSoftY1', 'uint16', 'wRoiSoftXRes', 'uint16', 'wRoiSoftYRes', 'uint16', 'wRoiSoftDouble', 'uint16', 'ZZwDummy', 'uint16#33');
structs.PCO_Image_ColorSet.packing=1;
structs.PCO_Image_ColorSet.members=struct('wSize', 'uint16', 'sSaturation', 'int16', 'sVibrance', 'int16', 'wColorTemp', 'uint16', 'sTint', 'int16', 'wMulNormR', 'uint16', 'wMulNormG', 'uint16', 'wMulNormB', 'uint16', 'sContrast', 'int16', 'wGamma', 'uint16', 'wSharpFixed', 'uint16', 'wSharpAdaptive', 'uint16', 'wScaleMin', 'uint16', 'wScaleMax', 'uint16', 'wProcOptions', 'uint16', 'ZZwDummy', 'uint16#93');
structs.PCO_Image.packing=1;
structs.PCO_Image.members=struct('wSize', 'uint16', 'ZZwAlignDummy1', 'uint16', 'strSegment1', 'PCO_Segment', 'strSegment2', 'PCO_Segment', 'strSegment3', 'PCO_Segment', 'strSegment4', 'PCO_Segment', 'ZZstrDummySeg1', 'PCO_Segment', 'ZZstrDummySeg2', 'PCO_Segment', 'ZZstrDummySeg3', 'PCO_Segment', 'ZZstrDummySeg4', 'PCO_Segment', 'ZZstrDummySeg5', 'PCO_Segment', 'ZZstrDummySeg6', 'PCO_Segment', 'ZZstrDummySeg7', 'PCO_Segment', 'ZZstrDummySeg8', 'PCO_Segment', 'ZZstrDummySeg9', 'PCO_Segment', 'ZZstrDummySeg10', 'PCO_Segment', 'ZZstrDummySeg11', 'PCO_Segment', 'ZZstrDummySeg12', 'PCO_Segment', 'ZZstrDummySeg13', 'PCO_Segment', 'ZZstrDummySeg14', 'PCO_Segment', 'strColorSet', 'PCO_Image_ColorSet', 'wBitAlignment', 'uint16', 'wHotPixelCorrectionMode', 'uint16', 'ZZwDummy', 'uint16#38');
structs.PCO_APIBuffer.packing=1;
structs.PCO_APIBuffer.members=struct('wSize', 'uint16', 'ZZwAlignDummy1', 'uint16', 'dwBufferStatus', 'uint32', 'hBufferEvent', 'voidPtr', 'ZZdwBufferAddress', 'uint32', 'dwBufferSize', 'uint32', 'dwDrvBufferStatus', 'uint32', 'dwImageSize', 'uint32', 'pBufferAdress', 'voidPtr', 'ZZwDummy', 'uint16#32');
structs.PCO_APIManagement.packing=1;
structs.PCO_APIManagement.members=struct('wSize', 'uint16', 'wCameraNum', 'uint16', 'hCamera', 'voidPtr', 'wTakenFlag', 'uint16', 'wAPIManagementFlags', 'uint16', 'pSC2IFFunc1', 'voidPtr', 'pSC2IFFunc2', 'voidPtr', 'pSC2IFFunc3', 'voidPtr', 'pSC2IFFunc4', 'voidPtr', 'pSC2IFFunc5', 'voidPtr', 'pSC2IFFunc6', 'voidPtr', 'pSC2IFFunc7', 'voidPtr', 'pSC2IFFunc8', 'voidPtr', 'pSC2IFFunc9', 'voidPtr', 'pSC2IFFunc10', 'voidPtr', 'pSC2IFFunc11', 'voidPtr', 'pSC2IFFunc12', 'voidPtr', 'pSC2IFFunc13', 'voidPtr', 'pSC2IFFunc14', 'voidPtr', 'pSC2IFFunc15', 'voidPtr', 'pSC2IFFunc16', 'voidPtr', 'pSC2IFFunc17', 'voidPtr', 'pSC2IFFunc18', 'voidPtr', 'pSC2IFFunc19', 'voidPtr', 'pSC2IFFunc20', 'voidPtr', 'strPCOBuf1', 'PCO_APIBuffer', 'strPCOBuf2', 'PCO_APIBuffer', 'strPCOBuf3', 'PCO_APIBuffer', 'strPCOBuf4', 'PCO_APIBuffer', 'strPCOBuf5', 'PCO_APIBuffer', 'strPCOBuf6', 'PCO_APIBuffer', 'strPCOBuf7', 'PCO_APIBuffer', 'strPCOBuf8', 'PCO_APIBuffer', 'strPCOBuf9', 'PCO_APIBuffer', 'strPCOBuf10', 'PCO_APIBuffer', 'strPCOBuf11', 'PCO_APIBuffer', 'strPCOBuf12', 'PCO_APIBuffer', 'strPCOBuf13', 'PCO_APIBuffer', 'strPCOBuf14', 'PCO_APIBuffer', 'strPCOBuf15', 'PCO_APIBuffer', 'strPCOBuf16', 'PCO_APIBuffer', 'ZZstrDummyBuf1', 'PCO_APIBuffer', 'ZZstrDummyBuf2', 'PCO_APIBuffer', 'ZZstrDummyBuf3', 'PCO_APIBuffer', 'ZZstrDummyBuf4', 'PCO_APIBuffer', 'ZZstrDummyBuf5', 'PCO_APIBuffer', 'ZZstrDummyBuf6', 'PCO_APIBuffer', 'ZZstrDummyBuf7', 'PCO_APIBuffer', 'ZZstrDummyBuf8', 'PCO_APIBuffer', 'ZZstrDummyBuf9', 'PCO_APIBuffer', 'ZZstrDummyBuf10', 'PCO_APIBuffer', 'pSC2IFFunc21', 'voidPtr', 'pSC2IFFunc22', 'voidPtr', 'pSC2IFFunc23', 'voidPtr', 'pSC2IFFunc24', 'voidPtr', 'pSC2IFFunc25', 'voidPtr', 'pSC2IFFunc26', 'voidPtr', 'pSC2IFFunc27', 'voidPtr', 'pSC2IFFunc28', 'voidPtr', 'pSC2IFFunc29', 'voidPtr', 'pSC2IFFunc210', 'voidPtr', 'pSC2IFFunc211', 'voidPtr', 'pSC2IFFunc212', 'voidPtr', 'pSC2IFFunc213', 'voidPtr', 'pSC2IFFunc214', 'voidPtr', 'pSC2IFFunc215', 'voidPtr', 'pSC2IFFunc216', 'voidPtr', 'pSC2IFFunc217', 'voidPtr', 'pSC2IFFunc218', 'voidPtr', 'pSC2IFFunc219', 'voidPtr', 'pSC2IFFunc220', 'voidPtr', 'pSC2IFFunc221', 'voidPtr', 'pSC2IFFunc222', 'voidPtr', 'pSC2IFFunc223', 'voidPtr', 'pSC2IFFunc224', 'voidPtr', 'pSC2IFFunc225', 'voidPtr', 'dwFrameTime4SoftFPS_ns', 'uint32', 'dwFrameTime4SoftFPS_s', 'uint32', 'sBufferCnt', 'int16', 'wCameraNumAtInterface', 'uint16', 'wInterface', 'uint16', 'wXRes', 'uint16', 'wYRes', 'uint16', 'wPowerCycleFlag', 'uint16', 'dwIF_param', 'uint32#5', 'wImageTransferMode', 'uint16', 'wRoiSoftX0', 'uint16', 'wRoiSoftY0', 'uint16', 'wRoiSoftX1', 'uint16', 'wRoiSoftY1', 'uint16', 'wImageTransferParam', 'uint16#2', 'wImageTransferTxWidth', 'uint16', 'wImageTransferTxHeight', 'uint16', 'wInterfaceMajorVersion', 'uint16', 'wInterfaceMinorVersion', 'uint16', 'wInterfaceBuildVersion', 'uint16', 'wInterfacePatchVersion', 'uint16', 'wBytesPerPixel', 'uint16', 'dwLineTime4SoftFPS', 'uint32', 'dwBuffersAdded', 'uint32', 'ZZwDummy', 'uint16#8');
structs.PCO_Birger.packing=1;
structs.PCO_Birger.members=struct('wCommand', 'uint16', 'wResult', 'uint16', 'wType', 'uint16', 'dwArray', 'uint32#32');
structs.PCO_METADATA_STRUCT.packing=1;
structs.PCO_METADATA_STRUCT.members=struct('wSize', 'uint16', 'wVersion', 'uint16', 'bIMAGE_COUNTER_BCD', 'uint8#4', 'bIMAGE_TIME_US_BCD', 'uint8#3', 'bIMAGE_TIME_SEC_BCD', 'uint8', 'bIMAGE_TIME_MIN_BCD', 'uint8', 'bIMAGE_TIME_HOUR_BCD', 'uint8', 'bIMAGE_TIME_DAY_BCD', 'uint8', 'bIMAGE_TIME_MON_BCD', 'uint8', 'bIMAGE_TIME_YEAR_BCD', 'uint8', 'bIMAGE_TIME_STATUS', 'uint8', 'wEXPOSURE_TIME_BASE', 'uint16', 'dwEXPOSURE_TIME', 'uint32', 'dwFRAMERATE_MILLIHZ', 'uint32', 'sSENSOR_TEMPERATURE', 'int16', 'wIMAGE_SIZE_X', 'uint16', 'wIMAGE_SIZE_Y', 'uint16', 'bBINNING_X', 'uint8', 'bBINNING_Y', 'uint8', 'dwSENSOR_READOUT_FREQUENCY', 'uint32', 'wSENSOR_CONV_FACTOR', 'uint16', 'dwCAMERA_SERIAL_NO', 'uint32', 'wCAMERA_TYPE', 'uint16', 'bBIT_RESOLUTION', 'uint8', 'bSYNC_STATUS', 'uint8', 'wDARK_OFFSET', 'uint16', 'bTRIGGER_MODE', 'uint8', 'bDOUBLE_IMAGE_MODE', 'uint8', 'bCAMERA_SYNC_MODE', 'uint8', 'bIMAGE_TYPE', 'uint8', 'wCOLOR_PATTERN', 'uint16', 'wCAMERA_SUBTYPE', 'uint16', 'dwEVENT_NUMBER', 'uint32', 'wIMAGE_SIZE_X_Offset', 'uint16', 'wIMAGE_SIZE_Y_Offset', 'uint16', 'bREADOUT_MODE', 'uint8');
structs.PCO_METADATA_STRUCT_V2.packing=1;
structs.PCO_METADATA_STRUCT_V2.members=struct('wSize', 'uint16', 'wVersion', 'uint16', 'bIMAGE_COUNTER_BCD', 'uint8#4', 'bIMAGE_TIME_US_BCD', 'uint8#3', 'bIMAGE_TIME_SEC_BCD', 'uint8', 'bIMAGE_TIME_MIN_BCD', 'uint8', 'bIMAGE_TIME_HOUR_BCD', 'uint8', 'bIMAGE_TIME_DAY_BCD', 'uint8', 'bIMAGE_TIME_MON_BCD', 'uint8', 'bIMAGE_TIME_YEAR_BCD', 'uint8', 'bIMAGE_TIME_STATUS', 'uint8', 'wEXPOSURE_TIME_BASE', 'uint16', 'dwEXPOSURE_TIME', 'uint32', 'dwFRAMERATE_MILLIHZ', 'uint32', 'sSENSOR_TEMPERATURE', 'int16', 'wIMAGE_SIZE_X', 'uint16', 'wIMAGE_SIZE_Y', 'uint16', 'bBINNING_X', 'uint8', 'bBINNING_Y', 'uint8', 'dwSENSOR_READOUT_FREQUENCY', 'uint32', 'wSENSOR_CONV_FACTOR', 'uint16', 'dwCAMERA_SERIAL_NO', 'uint32', 'wCAMERA_TYPE', 'uint16', 'bBIT_RESOLUTION', 'uint8', 'bSYNC_STATUS', 'uint8', 'wDARK_OFFSET', 'uint16', 'bTRIGGER_MODE', 'uint8', 'bDOUBLE_IMAGE_MODE', 'uint8', 'bCAMERA_SYNC_MODE', 'uint8', 'bIMAGE_TYPE', 'uint8', 'wCOLOR_PATTERN', 'uint16', 'wCAMERA_SUBTYPE', 'uint16', 'dwEVENT_NUMBER', 'uint32', 'wIMAGE_SIZE_X_Offset', 'uint16', 'wIMAGE_SIZE_Y_Offset', 'uint16');
structs.PCO_METADATA_STRUCT_V1.packing=1;
structs.PCO_METADATA_STRUCT_V1.members=struct('wSize', 'uint16', 'wVersion', 'uint16', 'bIMAGE_COUNTER_BCD', 'uint8#4', 'bIMAGE_TIME_US_BCD', 'uint8#3', 'bIMAGE_TIME_SEC_BCD', 'uint8', 'bIMAGE_TIME_MIN_BCD', 'uint8', 'bIMAGE_TIME_HOUR_BCD', 'uint8', 'bIMAGE_TIME_DAY_BCD', 'uint8', 'bIMAGE_TIME_MON_BCD', 'uint8', 'bIMAGE_TIME_YEAR_BCD', 'uint8', 'bIMAGE_TIME_STATUS', 'uint8', 'wEXPOSURE_TIME_BASE', 'uint16', 'dwEXPOSURE_TIME', 'uint32', 'dwFRAMERATE_MILLIHZ', 'uint32', 'sSENSOR_TEMPERATURE', 'int16', 'wIMAGE_SIZE_X', 'uint16', 'wIMAGE_SIZE_Y', 'uint16', 'bBINNING_X', 'uint8', 'bBINNING_Y', 'uint8', 'dwSENSOR_READOUT_FREQUENCY', 'uint32', 'wSENSOR_CONV_FACTOR', 'uint16', 'dwCAMERA_SERIAL_NO', 'uint32', 'wCAMERA_TYPE', 'uint16', 'bBIT_RESOLUTION', 'uint8', 'bSYNC_STATUS', 'uint8', 'wDARK_OFFSET', 'uint16', 'bTRIGGER_MODE', 'uint8', 'bDOUBLE_IMAGE_MODE', 'uint8', 'bCAMERA_SYNC_MODE', 'uint8', 'bIMAGE_TYPE', 'uint8', 'wCOLOR_PATTERN', 'uint16');
structs.PCO_TIMESTAMP_STRUCT.packing=1;
structs.PCO_TIMESTAMP_STRUCT.members=struct('wSize', 'uint16', 'dwImgCounter', 'uint32', 'wYear', 'uint16', 'wMonth', 'uint16', 'wDay', 'uint16', 'wHour', 'uint16', 'wMinute', 'uint16', 'wSecond', 'uint16', 'dwMicroSeconds', 'uint32');
methodinfo=fcns;